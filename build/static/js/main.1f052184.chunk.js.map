{"version":3,"sources":["Character.js","Search.js","Filters.js","App.js","serviceWorker.js","index.js"],"names":["Character","items","this","props","filterSpecies","className","map","item","includes","species","style","maxWidth","key","name","src","image","alt","id","status","gender","origin","location","React","Component","SearchAndSortHeader","htmlFor","type","placeholder","onChange","display","onClick","value","sort","Filter","border","marginTop","padding","specie","checked","e","App","updateFilter","target","state","push","pop","setState","sortById","filterByName","filteredList","filter","toLowerCase","filterName","filteredItems","preventDefault","error","isLoaded","filterGender","order","initialItems","a","b","fetch","then","res","json","result","results","x","i","indexOf","message","role","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.1f052184.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Character extends React.Component {\n  render() {\n    let items = this.props.items;\n    let filterSpecies = this.props.filterSpecies;\n    return (\n      <div className=\"row\" >\n        {items.map(item => ( filterSpecies.includes(item.species)?(\n          <div className=\"card text-white bg-dark col-6 col-md-3 p-sm-1\" style={{ maxWidth: '18rem' }} key={item.name}>\n            <img src={item.image} className=\"card-img-top\" alt={item.name}></img>\n            <div className=\"card-header text-uppercase\">{item.name}\n              <p>id: {item.id}</p>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"card-text row row-cols-2\">\n                <div className=\"col text-uppercase\">\n                  Status\n                      </div>\n                <div className=\"col text-right\">{item.status}</div>\n                <div className=\"col text-uppercase\">\n                  Species\n                      </div>\n                <div className=\"col text-right\">{item.species}</div>\n                <div className=\"col text-uppercase\">\n                  Gender\n                      </div>\n                <div className=\"col text-right\">{item.gender}</div>\n                <div className=\"col text-uppercase\">\n                  Origin\n                      </div>\n                <div className=\"col text-right\">{item.origin.name}</div>\n                <div className=\"col text-uppercase\">\n                  Last Location\n                      </div>\n                <div className=\"col text-right\">{item.location.name}</div>\n              </div>\n            </div>\n          </div>)\n        :<div key={item.name}></div>))}\n      </div>\n    );\n  };\n}\n","import React from 'react';\n\nexport function SearchAndSortHeader(props) {\n    return (\n        <div className=\"row\">\n            <div className=\"col-sm-12 col-md-6 form-group\">\n                <label htmlFor=\"searchInputName\">Search by name:</label>\n                <input type=\"text\" className=\"form-control\" id=\"searchInputName\" placeholder=\"Name\" name=\"filterName\"\n                    onChange={props.onChange()} style={{ display: 'inline-block', maxWidth: '78%' }}>\n                </input>\n                <button type=\"button\" id=\"searchButton\" className=\"btn btn-primary float-right\" onClick={props.onClick()}>\n                    Search\n                </button>\n            </div>\n            <div className=\"col-sm-12 col-md-6 form-group\">\n                <label htmlFor=\"sortInputId\">Sort By Id:</label>\n                <select className=\"form-control\" id=\"sortInputId\" name=\"sort\" value={props.sort} onChange={props.onChange()}>\n                    <option value=\"asc\">Ascending</option>\n                    <option value=\"desc\">Descending</option>\n                </select>\n            </div>\n        </div>\n    );\n}","import React from 'react';\n\nexport class Filter extends React.Component {\n    render() {\n        return (\n            <div style={{ border: \"1px solid\", marginTop: '20px', padding: '10px' }}>\n                <h4>Species</h4>\n                    {this.props.species.map(specie =>\n                        (<div className=\"form-check\" key={specie}>\n                            <input className=\"form-check-input\" type=\"checkbox\" value={specie} \n                            name=\"filterSpecies\" checked={this.props.filterSpecies.includes(specie)} onChange={e => this.props.onChange(e)}></input>\n                                <label className=\"form-check-label\">{specie}</label>\n                                </div>\n                        ))}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Character } from './Character';\nimport { SearchAndSortHeader } from './Search';\nimport { Filter } from './Filters';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      species: [],\n      filteredItems: [],\n      filterName: '',\n      filterGender: '',\n      filterSpecies: [],\n      sort: 'asc'\n    }\n  };\n\n  updateFilter = e => {\n    const target = e.target;\n    let value = target.value;\n    const name = target.name;\n\n    if (target.type === 'checkbox') {\n      target.checked ?\n        this.state.filterSpecies.push(target.value) :\n        this.state.filterSpecies.pop(target.value);\n      value = this.state.filterSpecies;\n    }\n\n    this.setState({\n      [name]: value\n    });\n\n    if (name === 'sort') {\n      this.sortById(value);\n    }\n  };\n\n  filterByName = e => {\n    let initialItems = this.state.items;\n    let filteredList = initialItems.filter(item => item.name.toLowerCase().includes(this.state.filterName.toLowerCase()));\n    this.setState({ filteredItems: filteredList });\n    e.preventDefault();\n\n  };\n\n  sortById(order) {\n    let initialItems = this.state.items;\n    let filteredList = order === 'asc' ?\n      initialItems.sort((a, b) => (a.id > b.id) ? 1 : -1) : initialItems.sort((a, b) => (a.id < b.id) ? 1 : -1);\n    this.setState({ filteredItems: filteredList });\n  };\n\n  componentDidMount() {\n    fetch(\"https://rickandmortyapi.com/api/character/\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.results,\n            filteredItems: result.results,\n            species: result.results.map(item => item.species).filter((x, i, a) => a.indexOf(x) === i),\n            filterSpecies: result.results.map(item => item.species).filter((x, i, a) => a.indexOf(x) === i)\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, filteredItems, filterSpecies, species } = this.state;\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"container\" role=\"main\">\n          <div className=\"row\">\n            <div className=\"col-sm-3\">\n              <h3>Filters</h3>\n              <Filter species={species} filterSpecies={filterSpecies} onChange={this.updateFilter} />\n            </div>\n            <div className=\"col-sm-9\">\n              <div className=\"row\">\n                <div className=\"col-sm-12\"><SearchAndSortHeader onChange={() => this.updateFilter} onClick={() => this.filterByName} sort={this.state.sort} />\n                </div>\n                <div className=\"col-sm-12\"><Character items={filteredItems} filterSpecies={filterSpecies} /></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}